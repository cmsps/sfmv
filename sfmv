#!/bin/sh
#
# sfmv item ... dir - safely move files and/or directories to dir
# sfcp item ... dir - safely copy files and/or directories to dir
#
# sfmv item [path/]newName - safe [ move and ] rename
# sfcp item [path/]newName - safe copy
#
# Sat Oct 5 22:35:26 BST 2019
#

<<'______________D__O__C__U__M__E__N__T__A__T__I__O__N_____________'

Copyright (C) 2020 Peter Scott - peterscott@pobox.com

Licence
-------
   This program is free software: you can redistribute it and / or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.

Rationale
---------
  You can use the -n or --no-clobber option of `mv' or `cp' to avoid
  overwriting existing files.  However, those commands do not tell you
  they have failed to move or copy something; `sfmv' gives an error
  message in such a case.

Description
-----------
  `sfmv' is a safe version of the `mv' command.  It does not overwrite
  existing files or directories.  It displays error messages when
  problems occur.  If it is run under a name ending with "cp" it is a
  safe version of the `cp' command.

  The `mv' command is overloaded in that it does renames as well as moves.
  For clarity, `sfmv' gives an explanation when the second of only two
  arguments is not an existing directory.

  `sfmv' gives a non-zero exit code if it, or the underlying `mv' or `cp'
  commands, issued any error messages.

______________D__O__C__U__M__E__N__T__A__T__I__O__N_____________

# usage - display usage message
#
usage(){
  cat <<-! >&2
	Usage: $NAME [ -qh ] item ... dir
	   or: $NAME [ -qh ] item [path/]newName

	Options:
	  -h  display this help and exit
	  -q  quiet -- no explanation when last argument
	               is not an existing directory
	!
  exit 1
}


# checkSimple file - check for simple file (Bourne shell)
#
#    return codes: 0=OK; 1=nosuch; 2=directory; 3=unreadable; 4=empty
#
checkSimple(){
  file=$1
  ls "$file" > /dev/null 2>&1
  if [ $? -ne 0 ] ;then
       echo "$NAME: $file: does not exist"
       return 1
  elif [ -d "$file" ] ;then
       echo "$NAME: $file: is a directory"
       return 2
  elif [ ! -r "$file" ] ;then
       echo "$NAME: $file: is not readable"
       return 3
  elif [ ! -s "$file" ] ;then
       echo "$NAME: $file: is empty"
       return 4
  else
       return 0
  fi >&2
}


# prevent the user giving the script a name containing white space
# -- saving the hassle of quoting internal file names
#
NAME=`basename "$0"`
words=`echo "$NAME" | wc -w`
if [ $words -ne 1 ] ;then
     echo "\`$NAME': I don't allow white space in command names" >&2
     exit 2
fi

# moving or copying?
#
case $NAME in
  *cp)
     command='cp -r'   # items may be dirs
     action=copied
     ;;
  *mv)
     command=mv
     action=moved
     ;;
  *)
     echo "\`$NAME': must end with \`cp' or \`mv'" >&2
     exit 3
esac

# process command line options
#
while getopts ':hq' option ;do
     case $option in
       h) usage ;;
       q) quiet=yes ;;
      \?) echo "$NAME: unknown option: \`$OPTARG'" >&2
          usage
     esac
done
shift `expr $OPTIND - 1`

# get last arg -- destination
#
test "$2" || usage
for arg ;do
     dest="$arg"
done

# deal with destination that is not an existing dir
#
checkSimple "$dest" 2> /dev/null
case $? in       # 0=ok; 1=nosuch; 3=unreadable; 4=empty
  0 | 3 | 4)
     echo "$NAME: $dest: existing file" >&2
     exit 4
     ;;

  1) # dest doesn't exist -- could be a rename or copy if only two args
     #
     if [ $# -ne 2 ] ;then
          echo "$NAME: $dest: not an existing directory" >&2
          exit 5
     fi

     # check item exists and readable
     #
     item=$1
     checkSimple "$item" 2> /dev/null
     case $? in      # 1=nosuch; 3=unreadable
       1 | 3)
          checkSimple "$item"
          exit `expr $? + 10`
     esac

     # check dir of destination exists (it may simply be `.')
     #
     destDir=`dirname "$dest"`
     if [ ! -d "$destDir" ] ;then
          echo "$NAME: $destDir: not an existing directory" >&2
          exit 6
     fi

     # do simple command
     #
     $command "$item" "$dest" || exit 7

     # if needed, work out type of copy / rename / move and display it
     #
     if [ ! "$quiet" ] ;then
          destName=`basename "$dest"`
          sourceDir=`dirname "$item"`
          sourceName=`basename "$item"`
          if [ "$sourceDir" = "$destDir" ] ;then
               preposition=in
               test $action = moved && action=renamed
          elif [ "$destName" = "$sourceName" ] ;then
               preposition=to
          else
               preposition='under a new name to'
          fi
          if [ "$destDir" = . ] ;then
               directory='the current'
          else
               directory=another
          fi
          echo "$NAME: $action an item $preposition $directory directory" >&2
     fi

     # done the only "move" so stop
     #
     exit 0
esac

# process all arguments but last one
#
count=0
for item ;do
     count=`expr $count + 1`
     test $count -eq $# && break
     checkSimple "$item" 2> /dev/null
     case $? in      # 1=nosuch; 3=unreadable
       1 | 3)
          checkSimple "$item"
          ;;
       *)
          destName=`basename "$item"`
          checkSimple "$dest/$destName" 2> /dev/null
          case $? in    # 1=nosuch
            1) $command "$item" "$dest" || exit 8 ;;
            *) echo "$NAME: $dest/$destName: already exists" >&2
               errors=yes
          esac
     esac
done
test "$errors" && exit 9
